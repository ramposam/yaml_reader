Docker hub contains lot of docker images. Like play store/Appstore 

 

Running version of a image is called container 

 

Commands: 

docker --version 

docker run -p 5000:5000 in28min/hello-world-python:0.0.1.RELEASE 

docker run -p 5000:5000 in28min/hello-world-java:0.0.1.RELEASE 

docker run -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE 

 

# to run docker image in a detached mode with port 

docker run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE 

docker run -d -p 5001:5000 in28min/hello-world-python:0.0.1.RELEASE 

 

# to see logs of a continer 

docker logs 04e52ff9270f5810eefe1f77222852dc1461c22440d4ecd6228b5c38f09d838e 

 

# to see logs of a container 

docker logs c2ba 

 

# to see logs of a container on consoler 

docker logs –f c2ba 

 

# to search list of images present on machine 

docker images 

 

# to see list of containers / images which are running 

docker container ls 

docker container ls –a 

 

# to stop a running image/container 

docker container stop f708b7ee1a8b 

 

# to run docker image in interactive way like passing inputs to the program while running docker image 

Winpty Docker run –it imageid 

 

# to see contents of docker container using bash. This takes you to bash shell of docker image. So you can run any of python code if you want 

Winpty Docker run it imageid sh 

 

# run any of python script from a docker image in windows(use winpty) 

winpty docker run -it imageid python guessing_game.py 

 

# to copy all files from local to running docker container 

docker cp ./input/. containerid:/app/input/. 

 

 

# to see content of a running container using interactive shell from windows 

winpty docker exec -it 01cd470e73b1 sh 

 

# copy files/folders from a running/stopped container to local 

docker container cp b5d74bc38720:/app/output ./ 

 

docker run -d -p 5001:8080 in28min/hello-world-rest-api:0.0.1.RELEASE 

 

# to download an image from docker hub to local 

docker pull mysql 

docker search mysql 

 

# docker image history 

docker image history in28min/hello-world-java:0.0.1.RELEASE 

docker image history 100229ba687e 

 

# to see details of an image 

docker image inspect 100229ba687e 

 

# to remove image from local 

docker image remove mysql 

docker image remove in28min/hello-world-java:0.0.1.RELEASE 

 

# to clear container runs 

docker container rm 3e657ae9bd16 

docker container ls –a 

 

# to see details of a container 

Docker container inspect 3e657ae9bd16 

 

# to pause/unpause a container 

docker container pause 832 

docker container unpause 832 

 

# to stop a container gracefully (sigterm – signal to terminate) 

docker container stop 832 

 

# to stop a container forcefully (sigkill – Signal to kill) 

docker container stop 832 

 

# to see details of a container 

docker container inspect ff521fa58db3 

 

# to remove all stopped containers 

docker container prune 

 

docker system 

docker system df 

docker system info 

 

# to remove all stopped containers, unused images 

docker system prune –a 

 

docker top 9009722eac4d 

# to see stats of a container 

docker stats 9009722eac4d 

 

# to run container with 512Mb Ram 

docker container run -p 5000:5000 -d -m 512m in28min/hello-world-java:0.0.1.RELEASE 

 

# to run container with cpu quota as 50%(50000), total cpu-quota is 100,000 

docker container run -p 5000:5000 -d -m 512m --cpu-quota=50000  in28min/hello-world-java:0.0.1.RELEASE 

 

# to see the executed commands 

docker system events 

  

docker container stats 4faca1ea914e3e4587d1d790948ec6cb8fa34f26e900c12632fd64d4722fd59a 

docker stats 42f170966ce613d2a16d7404495af7b3295e01aeb9142e1fa1762bbdc581f502 

  

cd /in28Minutes/git/devops-master-class/projects/hello-world/hello-world-python  

docker build -t in28min/hello-world-python:0.0.2.RELEASE .  

docker run -p 5000:5000 -d in28min/hello-world-python:0.0.2.RELEASE 

docker history e66dc383f7a0 

docker push in28min/hello-world-python:0.0.2.RELEASE 

  

cd ../hello-world-nodejs/ 

docker build -t in28min/hello-world-nodejs:0.0.2.RELEASE .  

docker container run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.2.RELEASE 

docker push in28min/hello-world-nodejs:0.0.2.RELEASE 

  

 

# login to docker hub 

Docker login –u rposam 

 

# To push a new docker image to existing repository 

$ docker tag rposam/python-custom-wheel-yaml-reader:0.0.2.RELEASE rposam/python-custom-wheel-yaml-reader:0.0.2.RELEASE 

 

cd ../hello-world-java/ 

docker build -t in28min/hello-world-java:0.0.2.RELEASE .  

docker run -d -p 5000:5000 in28min/hello-world-java:0.0.2.RELEASE 

docker push in28min/hello-world-java:0.0.2.RELEASE 

  

docker run -d -p 5001:5000 in28min/hello-world-nodejs:0.0.3.RELEASE ping google.com 

  

Default docker containers run in bridged mode, can't talk one container to another container. 

 

# docker run two containers on different ports 

docker run -d -p 8000:8000 --name=currency-exchange in28min/currency-exchange:0.0.1-RELEASE 

docker run -d -p 8100:8100 --name=currency-conversion in28min/currency-conversion:0.0.1-RELEASE 

  

docker network ls 

docker network inspect bridge 

  

# to create a link between two running containers to talk each other (one way) 

docker run -d -p 8100:8100 --env CURRENCY_EXCHANGE_SERVICE_HOST=http://currency-exchange --name=currency-conversion --link currency-exchange in28min/currency-conversion:0.0.1-RELEASE 

 

# to create a link between two running containers to talk each other (recommended way) 

 

# to create a network  

docker network create currency-network 

 

# to stop conatiners 

docker container stop currency-exchange 

docker container stop currency-conversion 

 

# use network to create a container 

docker run -d -p 8000:8000 --name=currency-exchange --network=currency-network in28min/currency-exchange:0.0.1-RELEASE 

 

# use the same network to create another container with environment variable using other container name 

docker run -d -p 8100:8100 --env CURRENCY_EXCHANGE_SERVICE_HOST=http://currency-exchange --name=currency-conversion --network=currency-network in28min/currency-conversion:0.0.1-RELEASE 

  

# docker-compose is used to run multi containers.  

# Docker Compose is a tool for defining and running multi-container applications. 

 

# to check docker-compose version 

docker-compose --version 

cd ../../microservices/ 

 

# to run docker-compose file 

docker-compose up 

 

# to run docker-compose file in detached mode 

docker-compose up -d 

docker container ls 

 

# to see list of networks on docker 

docker network ls 

docker network inspect microservices_currency-compose-network 

 

# to stop docker-compose file 

docker-compose down 

docker container ls -a 

docker system prune -a 

docker-compose config 

docker-compose images 

docker-compose ps 

docker-compose top 

  

docker build -t in28min/hello-world-java:0.0.1.RELEASE . 

 

# to push created image to docker hub(public repository) 

docker push in28min/hello-world-java:0.0.1.RELEASE 

  

docker build -t in28min/hello-world-python:0.0.1.RELEASE . 

docker push in28min/hello-world-python:0.0.1.RELEASE 

  

docker build -t in28min/hello-world-nodejs:0.0.1.RELEASE . 

docker push in28min/hello-world-nodejs:0.0.1.RELEASE 

 

Docker dependencies are not going to change frequent. 

It's a best practice to keep dependencies copy statement first and run then rest other copy commands if any. 

 

If you have docker cmd line frequently changing use CMD else go for ENTRYPOINT. 

 

CMD may get overridden incase if you add something end of docker run command like below 

Ex: Docker run –p 5000:5000 –d devops/hello-world-python:0.0.1.RELEASE ping www.google.com 

 
